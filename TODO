
Todo:
  ✔ make type symbol a node @done(21-10-03 12:32)
  ✔ make to_json have the __type__ be the str reprentatoin of the node/expr/stmt type @done(21-10-03 12:54)
  ✘ make Result a base class and add error as a func @cancelled(21-10-03 22:49)
  ✔ make all statements return unit but expr stmt can still print value @done(21-10-04 20:56)
  ✔ turn Unions to | @done(21-10-08 17:56)
  ✔ allow certain parsing to be restricted @done(21-10-15 09:50)
  ☐ review testing
  ☐ add binop to add to chars together to make a string
  ☐ add binop to add to char and string together to make a string

Features To Implement:
  ✔ statement blocks @done(21-10-04 00:09)
  ✔ if else statements @done(21-10-04 01:37)
    ✔ to solve the dangling else problem, just attach the else to the closest if @done(21-10-04 01:37)
  ✔ arrays @done(21-10-08 22:40)
    ✔ handle empty array. this can either be through using a default keyword that take a type or creating an any type and cast func for types @done(21-10-08 22:40)
  ✔ tuples @done(21-10-05 04:25)
  ✔ objects @done(21-10-05 04:25)
  ☐ comments
  ☐ access operator
  ☐ functions: `def myfunc = function (arg1:int, arg2:int) -> bool { ... }`
  ☐ while statement
    ☐ `loop {}` will be syntax sugar for `while True { }`
  ☐ for loop
  ☐ match stmts and exprs

Programs to Test:
  ☐ Factorial
  ☐ Rule 110
  ☐ Game of Life
  ☐ Hash Table